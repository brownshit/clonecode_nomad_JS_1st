============================================
const title = document.querySelector("div.hello:first-child h1");
console.log(title);

console.dir(title)
//on으로 시작하는 애들이 event listener이다.
//onmouseenter...마우스 커서가 가리키면 작동하는 이벤트 리스너


function handleTitleClick(){
    console.log("title was cliked!");
    if(title.style.color == "blue"){
        title.style.color = "Black";
    }else{
        title.style.color = "Blue";
    }
}

function handleMouseEnter(){
    console.log('mouse is here');
    title.innerText = "mouse is here";
}

function handleMouseLeave(){
    console.log("mouse is gone...");
    title.innerText = "Click me!";
}

title.addEventListener("click", handleTitleClick);      
//handleTitleClick()로 넘기면 실행이 자동으로 된다. 1번. 즉, 취지에 맞지 않는다.
//title listening...
title.addEventListener("mouseenter", handleMouseEnter);
title.addEventListener("mouseleave", handleMouseLeave);


============================================
const h1 = document.querySelector("div.hello:first-child h1");
console.log(h1);

console.dir(h1)
//on으로 시작하는 애들이 event listener이다.
//onmouseenter...마우스 커서가 가리키면 작동하는 이벤트 리스너


function handleTitleClick(){
    console.log("h1 was cliked!");
    if(h1.style.color == "blue"){
        h1.style.color = "Black";
    }else{
        h1.style.color = "Blue";
    }
}

function handleMouseEnter(){
    console.log('mouse is here');
    h1.innerText = "mouse is here";
}

function handleMouseLeave(){
    console.log("mouse is gone...");
    h1.innerText = "Click me!";
}

//title.onclick = handleTitleClick;
h1.addEventListener("click", handleTitleClick);

//handleTitleClick()로 넘기면 실행이 자동으로 된다. 1번. 즉, 취지에 맞지 않는다.
//title listening...

//title.onmouseenter = handleMouseEnter;
h1.addEventListener("mouseenter", handleMouseEnter);

//title.onmouseleave = handleMouseLeave;
h1.addEventListener("mouseleave", handleMouseLeave);

//하지만, addEventListener가 removeEventlistener로 event listener 제거가 가능하다.

function handelWindowResize(){
    if(document.body.style.backgroundColor == "tomato"){
        document.body.style.backgroundColor = "beige";    
    } else{
        document.body.style.backgroundColor = "tomato";    
    }
}

window.addEventListener("resize", handelWindowResize);

//document는 body title head같은 애들만 서칭이 가능하다.

function handelWindowCopy(){
    alert("copier!");
}

window.addEventListener("copy",handelWindowCopy);

function handleWindowOffLine(){
    alert("SOS not on-Line");
}
function handleWindowOnLine(){
    alert("ALL GOOOD!!");
}

window.addEventListener("offline", handleWindowOffLine);
window.addEventListener("online", handleWindowOnLine);

============================================
const h1 = document.querySelector("div.hello:first-child h1");

function handleTitleClick(){
    const currentColor = h1.style.color;
    let newColor;
    if(currentColor != "blue"){
        newColor = "blue";
    }else{
        newColor = "tomato";
    }
    h1.style.color = newColor;
}
h1.addEventListener("click",handleTitleClick);

============================================
const h1 = document.querySelector("div.hello:first-child h1");

function handleTitleClick(){
    //js파일안에서 h1스타일에 관한 동작은 제거해주는게 관례! CSS로 처리하는게 정석이다
    //css에서 .찍으면 class이다.
    console.log(h1.className);
    console.log("__",h1.classList);
    //h1.className = "activeTom";
    //h1.className은 setter이면서 getter이다.
    const clickedTom = "activeTom"
    const clickedBlu = "activeBlu"

    if(h1.classList.contains(clickedTom)){
        h1.classList.remove(clickedTom);
        h1.classList.add(clickedBlu);
    }else{
        h1.classList.remove(clickedBlu);
        h1.classList.add(clickedTom)
    }

}
h1.addEventListener("click",handleTitleClick);
//style 은 css로 바꿔주는게 정석이다.

============================================
const h1 = document.querySelector("div.hello:first-child h1");
function handleTitleClick(){
    //js파일안에서 h1스타일에 관한 동작은 제거해주는게 관례! CSS로 처리하는게 정석이다
    //css에서 .찍으면 class이다.
    console.log(h1.className);
    console.log(h1.classList);
    //h1.className = "activeTom";
    //h1.className은 setter이면서 getter이다.
    const clickedTom = "activeTom"
    const clickedBlu = "activeBlu"
    /*
    using instead toggle    
    if(h1.classList.contains(clickedTom)){
        h1.classList.remove(clickedTom);
        h1.classList.add(clickedBlu);
    }else{
        h1.classList.remove(clickedBlu);
        h1.classList.add(clickedTom)
    }
    like..
    */
    h1.classList.toggle(clickedTom, clickedBlu);
    //위의 조건문은 이와같이 메소드 1개로 대체가 된다.

}

h1.addEventListener("click",handleTitleClick);
//style 은 css로 바꿔주는게 정석이다.

============================================
const loginForm = document.querySelector(".login-form")
//id : #    //class  : .
const loginInput = loginForm.querySelector("input");
//const loginInput = document.querySelector("#login-form input");
//const loginButton = loginForm.querySelector("button");

console.log(document);
function onLoginSubmit(){
    const username = loginInput.value;
    console.log(username);
    //위의 기능들은 브라우저 자체의 기능을 사용하면 대체가 가능하다.
    //user가 입력하는 값의 유효성을 확인하는것은 좋은 방법이다.
    
    //input 내용을 가져오려면 input의 property 중 value를 가져오면 된다.

    //input의 유효성 검사를 작동시키기 위해서는 dir말고, form사용하자
    //input은 form 안에 있어야 한다.
    //required는 필수 입력해야하는 정보를 의미한다.
    
    //form 안에 있는 버튼을 누르면 페이지가 새로고침된다....!
    //submit the form이 중요관심사___새로고침전에 user정보를 저장하게 한다.
    //웹사이트 전체를 매번 새로고침하지 않게
}
//click이 아니라 submit을 감지해야한다.
loginForm.addEventListener("submit",onLoginSubmit);
//드래그 shift ctrl L
//새로고침되는건 form submit의 기본동작이다.

//loginButton.addEventListener("click", onLoginSubmit);

============================================
const loginForm = document.querySelector(".login-form")
//id : #    //class  : .
const loginInput = loginForm.querySelector("input");
//const loginInput = document.querySelector("#login-form input");
//const loginButton = loginForm.querySelector("button");

console.log(document);
function onLoginSubmit(event){//argument에 자동으로 js가 함수실행시의 정보 전달
    event.preventDefault();
    //어떤 event(tomato에 관련된)의 기본행동이든지 발생을 방지
        //기본 행동 : 브라우저가 기본적으로 수행하는 동작
        //기본적으로 새로고침 하는 행동을 방지한다.
    
    //const username = loginInput.value;
    //console.log(username);
    console.log(event);
    console.log(loginInput.value);
}
//click이 아니라 submit을 감지해야한다.
loginForm.addEventListener("submit",onLoginSubmit);
//드래그 shift ctrl L
//초기화되는 기본 submit동작을 막는게 관건이다.
============================================
//anchor 요소.링크로 연결해주는
//form의 기본동작은 submit
//link의 기본동작은 클릭시 다른 페이지로 이동하는것

const loginForm = document.querySelector(".login-form");
const loginInput = loginForm.querySelector("input");
const greeting = document.querySelector("#greeting");
//const link = document.querySelector("a");

const HIDDEN_CLASSNAME = "hidden";      //대문자로 표기된 변수는 string 저장할때

console.log(document);

function onLoginSubmit(event){
    event.preventDefault();
    //이름입력된후, hidden실행해서 없애주기
    const username = loginInput.value;  //입력된 이름 저장
    loginForm.classList.add(HIDDEN_CLASSNAME);
    console.log(username);
    console.log(greeting);
    //greeting.innerText = "Hello "+username;
    greeting.innerText = `Hello ${username}`;   //`` not '', ""
    greeting.classList.remove(HIDDEN_CLASSNAME);
}
//how to saving value...
//localStorage는 브라우저에서 뭔가를 저장하게 하고 나중에 가져다가 사옹할수 있게 한다.
//작업자 도구 애플리케이션에서 확인이 가능하다.
//localStorage.으로 브라우저의 미니 DB를 사용 가능하다.

/*
    function handleLinkClick(event){
        event.preventDefault();
        //alert("clicked!");       //this line prevent to move on link on "a"...
        console.dir(event);
    }

 */
loginForm.addEventListener("submit",onLoginSubmit);
//link.addEventListener("click",handleLinkClick);
//()함수 실행을 위해 괄호를 추가하지 않는것은 JS에게 이벤트마다 실행하게 권한을
//위임하는 것.

//<a href="https://nomadcoders.co">Go to courses</a>

-------------------------------------------------------------

body{
    background-color: bisque;
}
.hidden{
    display: none;
}
-------------------------------------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="style.css">
    <title>Hello! From JS!</title>
</head>
<body>
    <form class="login-form">
        <input 
            required 
            maxlength="15" 
            type="text" 
            placeholder="what is your name?"
        />
        <button>Log In</button>
    </form>
    <h1 id="greeting" class="hidden"></h1>
    <script src ="potato.js"></script>
</body>
</html>
============================================
//making clock...
const clock = document.querySelector("h2#clock");

//interval : 시간간격을 두고 실행 
//timeout?

function getClock(){
    const date = new Date();
    
    //padStart는 string 에만 사용이 가능하다.
    const hours = String(date.getHours()).padStart(2,"0");
    const minute = String(date.getMinutes()).padStart(2,"0");
    const second = String(date.getSeconds()).padStart(2,"0");

    console.log(`${Number(hours)}:${Number(minute)}:${Number(second)}`);
    clock.innerText = `${Number(hours)}:${Number(minute)}:${Number(second)}`;//${}

}
getClock();
setInterval(getClock, 1000)//실행하려는 함수, 함수간격 millisecond
//setTimeout(sayHello, 5000); //5초뒤 실행

//padstart(자릿수, 자릿수가 맞지않으면 채우는 수)
/* 
"hello".padStart(20, "liajsldkf")
'liajsldkfliajslhello'
*/

============================================
const quotes = [
    {
        quote: "They must often change who would be constant in happiness or wisdom. ",
        author: "Confucius",
    },{
        quote:"Age is no guarantee of maturity.",
        author:"Lawana Blackwell",
    },{
        quote:"Youth isn’t always all it’s touted to be.",
        author:"Lawana Blackwell",
    },{
        quote:"You will face many defeats in life, but never let yourself be defeated.",
        author:"Maya Angelou",
    },{
        quote:"The greatest glory in living lies not in never falling, but in rising every time we fall.",
        author:"Nelson Mandela",
    },{
        quote:"Life is either a daring adventure or nothing at all",
        author:"Helen Keller",
    },{
        quote:"This too shall pass.",
        author:"Et hoc transibit",
    },{
        quote:"Only I can change me life, no one can do it for me. ",
        author:"Carol Burnett",
    },{
        quote:"Life is unfair, get used to it.",
        author:"Bill Gates",
    },{
        quote:"All you need in this life is ignorance and confidence, then success is sure.",
        author:"Mark Twain",
    },{
        quote:"Life is a mountain. Your goal is to find your path, not to reach the top.",
        author:"Maxime Lagacé",
    },{
        quote:"Despite the forecast, live like it’s spring. ",
        author:"Lilly Pulitzer",
    },
]

const quote = document.querySelector("#quote span:first-child");
const author = document.querySelector("#quote span:last-child");

const randomFloat = Math.random()*quotes.length;
const randomQuoteIndex = Math.floor(randomFloat);

console.log(quotes[randomQuoteIndex]);
console.log(quotes.length);

quote.innerText = quotes[randomQuoteIndex].quote;
author.innerText = quotes[randomQuoteIndex].author;

============================================
const images = [
    "0.jpg",
    "1.jpg",
    "2.jpg",
    "3.jpg",
    "4.jpg",
    "5.jpg"
]

const randomImgFloat = Math.random() * images.length;
const randomImageIndex = Math.floor(randomImgFloat);
//다른 파일이라도 html하나에 묶여있어서 함수명을 다르게 해줘야 한다.


const chosenImage = images[randomImageIndex];

console.log(chosenImage);

const BGImage = document.createElement("img");

BGImage.src =`image/${chosenImage}`;
console.log(BGImage);

document.body.appendChild(BGImage);
//append는 제일 뒤에 위차하게...
//prepend는 제일 앞에 위치하게 하는것.
============================================
const toDoForm = document.getElementById("todo-form");
const toDoInput = toDoForm.querySelector("input");
const toDoList = document.getElementById("todo-list");

const TODOS_KEY = "todos";

let toDos = [];
//toDos가 빈값으로 시작되면, 매번 새로고침시마다,
//localStorage의 data들이 사라지게 된다는 점에 유의할것.

function saveToDos(){
    localStorage.setItem(TODOS_KEY, JSON.stringify(toDos));
    //JSON.stringify(toDos) 는 스트링형식으로 저장.
    //현재 localStorage에 넣고있다.

    //JSON.parse로는 string을 array(list)로 변환이 가능하다.
}

function deleteToDo(event){
    console.log(event.target.parentElement.innerText);
    //parentElement는 이벤드가 발생된 target의 부모이다.
    const li = event.target.parentElement;
    li.remove();
}

function paintToDo(newToDo){
    const li = document.createElement("li");
    const span = document.createElement("span");
    const btn = document.createElement("button");
    btn.innerText = "x";
    btn.addEventListener("click", deleteToDo);
    li.appendChild(span);
    li.appendChild(btn);
    span.innerText = newToDo;
    //console.log(li);
    toDoList.appendChild(li);
}

//삭제버튼 추가

function handleToDoSubmit(event){
    event.preventDefault();
    const newToDo = toDoInput.value;
    //value storage in newToDo
    //console.log(toDoInput.value);
    toDoInput.value = "";
    //console.log(newToDo, toDoInput.value);

    toDos.push(newToDo);
    paintToDo(newToDo);
    saveToDos();
}

toDoForm.addEventListener("submit", handleToDoSubmit);

/*
function sayHello(item){    //item은 현재 처리되는있는 정보 제공
    console.log("this is the turn of",item);
}

*/

const savedToDos = localStorage.getItem(TODOS_KEY);

console.log(savedToDos);
if(savedToDos){
    const parsedToDos = JSON.parse(savedToDos);
    //js에서 사용할수 있게 array로 convert했다.
    toDos = parsedToDos;
    console.log(parsedToDos);   //it is array
    
    parsedToDos.forEach(paintToDo);
    //위와 동일코드
    //parsedToDos.forEach((item) => console.log("this is the turn of",item));
    //화살표 함수

    //forEach만 쓰고...이건 parsedToDos에 대해
    //function을 실행하게 해준다.
        
}
============================================
const toDoForm = document.getElementById("todo-form");
const toDoInput = toDoForm.querySelector("input");
const toDoList = document.getElementById("todo-list");

const TODOS_KEY = "todos";

let toDos = [];
//toDos가 빈값으로 시작되면, 매번 새로고침시마다,
//localStorage의 data들이 사라지게 된다는 점에 유의할것.

//localstorage가 DB가 아니라 toDos가 DB이다. localstorage는 값 저장용도.

function saveToDos(){
    localStorage.setItem(TODOS_KEY, JSON.stringify(toDos));
    //JSON.stringify(toDos) 는 스트링형식으로 저장.
    //현재 localStorage에 넣고있다.

    //JSON.parse로는 string을 array(list)로 변환이 가능하다.
}

function deleteToDo(event){
    console.log(event.target.parentElement.innerText);
    //parentElement는 이벤드가 발생된 target의 부모이다.
    const li = event.target.parentElement;
    console.log(li.id);
    li.remove();

    console.log(typeof li.id);
    //존나 중요한 한줄...
    //delete 실행 시 filter해서 toDos를 새로운 요소로 new update... 
    toDos = toDos.filter(toDo=> toDo.id !==parseInt(li.id));
    //toDo.id == number,
    //li.id == string
    saveToDos();
}

function paintToDo(newToDoObj){     //get Object...
    const li = document.createElement("li");
    li.id = newToDoObj.id;      //li의 id를 Date.now()로 설정해버렸디.
    const span = document.createElement("span");
    span.innerText = newToDoObj.text;
    const btn = document.createElement("button");
    btn.innerText = "x";

    btn.addEventListener("click", deleteToDo);
    li.appendChild(span);
    li.appendChild(btn);
    //console.log(li);
    toDoList.appendChild(li);
}

//삭제버튼 추가

function handleToDoSubmit(event){
    event.preventDefault();
    const newToDo = toDoInput.value;
    //value storage in newToDo
    //console.log(toDoInput.value);
    toDoInput.value = "";
    //console.log(newToDo, toDoInput.value);
    const newToDoObj = {
        text:newToDo,
        id:Date.now(),      //id로 각 li item을 구별하게,,,
    };

    toDos.push(newToDoObj);     //Object를 저장한다.
    paintToDo(newToDoObj);
    saveToDos();
}

toDoForm.addEventListener("submit", handleToDoSubmit);

/*
function sayHello(item){    //item은 현재 처리되는있는 정보 제공
    console.log("this is the turn of",item);
}

*/

const savedToDos = localStorage.getItem(TODOS_KEY);

console.log(savedToDos);
if(savedToDos){
    const parsedToDos = JSON.parse(savedToDos);
    //js에서 사용할수 있게 array로 convert했다.
    toDos = parsedToDos;        //toDos update

    console.log(parsedToDos);   //it is array
    
    parsedToDos.forEach(paintToDo); //item들을 넘김
    //위와 동일코드
    //parsedToDos.forEach((item) => console.log("this is the turn of",item));
    //화살표 함수
        //forEach is most important
    //forEach만 쓰고...이건 parsedToDos에 대해
    //function을 실행하게 해준다.

    //.filter 함수...
    //it gives you a new array exclude member that you wanna delete...

        
}
============================================

============================================

============================================

============================================

============================================

============================================

============================================

============================================
